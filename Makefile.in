# @configure_input@
# Run ./configure in the main MapServer directory to turn this Makefile.in
# into a proper Makefile

prefix		=	@prefix@
exec_prefix	=	@exec_prefix@
libdir	=	@libdir@
bindir	=	@bindir@
srcdir	=	@srcdir@
top_builddir = @top_builddir@
SHELL = @SHELL@
package     = @PACKAGE_NAME@
#
# MS_VERSION - Set by configure based in mapserver.h
#
MS_VERSION=	@MS_VERSION@

#
# Name of static and shared libs to produce
#
LIBMAP=	libmapserver.la

#
# If you want to ignore missing datafile errors uncomment the following
# line. This is especially useful with large tiled datasets that may not
# have complete data for each tile.
#
#IGNORE_MISSING_DATA=-DIGNORE_MISSING_DATA
IGNORE_MISSING_DATA = @IGNORE_MISSING_DATA@

#
# If you want to use shape Z and M parameter this option must be set.
# It's OFF by default.
#
#USE_POINT_Z_M=-DUSE_POINT_Z_M
USE_POINT_Z_M = @USE_POINT_Z_M@

#
# If you want to use disable fast versions of NINT (used by default) then
# define the following
# It's OFF by default.
#
#USE_NINT=-DUSE_GENERIC_MS_NINT
USE_NINT = @USE_NINT@

#
# Apparently these aren't as commonplace as I'd hoped. Edit the
# following line to reflect the missing functions on your platform.
#
# STRINGS=-DNEED_STRCASECMP -DNEED_STRNCASECMP -DNEED_STRDUP -DNEED_STRLCAT
STRINGS= @STRINGS@

# Proj.4 distribution (cartographic projection routines). Not required for normal use.
PROJ_INC=  @PROJ_INC@
PROJ_LIBS= @PROJ_LIBS@
PROJ=      @PROJ_ENABLED@

# GD distribution
GD_INC=  @GD_INC@
GD_LIB=  @GD_LIB@

AGG_INC=  -Irenderers/agg/include

#
# Optional Opengl Support.
#
FTGL=     @FTGL_ENABLED@
FTGL_LIB=  @FTGL_LIB@
FTGL_INC=  @FTGL_INC@

#Freetype support
FT_ENABLE=     @FT_ENABLED@
FT_LIB=  @FT_LIB@
FT_INC=  @FT_INC@

#
# Optional Opengl Support.
#
OGL=     @OGL_ENABLED@
OGL_LIB=  @OGL_LIB@
OGL_INC=  @OGL_INC@


PNG_INC= @PNG_INC@
PNG_LIB= @PNG_LIB@

#
# Giflib support
#
GIF_INC= @GIF_INC@
GIF_LIB= @GIF_LIB@
GIF=	 @GIF_ENABLED@


# JPEG distribution (raster support for grayscale JPEG images, INPUT ONLY).
JPEG_INC= @JPEG_INC@
JPEG_LIB= @JPEG_LIB@
JPEG=     @JPEG_ENABLED@

# ESRI SDE Support. You MUST have the SDE Client libraries and include files
# on your system someplace. The actual SDE server you wish to connect to can
# be elsewhere.
SDE=	  @SDE_ENABLED@
SDE_LIB=  @SDE_LIB@
SDE_INC=  @SDE_INC@

# Optional OGR Support.  OGC Simple Feature inspired interface for vector
# formats.  See http://ogr.maptools.org/
# Note that since OGR is part of the GDAL library, it uses GDAL_LIB + GDAL_INC
OGR=	  @OGR_ENABLED@

# Optional GDAL Support (provides read access to a variety of raster formats)
# See http://www.remotesensing.org/gdal/
GDAL=	  @GDAL_ENABLED@
GDAL_LIB=  @GDAL_LIB@
GDAL_INC=  @GDAL_INC@

# Optional GEOS Support.
# See http://geos.refractions.net/
GEOS=     @GEOS_ENABLED@
GEOS_LIB=  @GEOS_LIB@
GEOS_INC=  @GEOS_INC@

# Optional PostGIS Support.  See http://postgis.refractions.net/
POSTGIS=      @POSTGIS_ENABLED@
POSTGIS_LIB=  @POSTGIS_LIB@
POSTGIS_INC=  @POSTGIS_INC@

# Optional Mysql Support. 
MYSQL=      @MYSQL_ENABLED@
MYSQL_LIB=  @MYSQL_LIB@
MYSQL_INC=  @MYSQL_INC@

# Optional ORACLESPATIAL Support. Contact: cabral@cttmar.univali.br
ORACLESPATIAL=@ORACLESPATIAL_ENABLED@
ORACLESPATIAL_LIB=@ORACLESPATIAL_LIB@
ORACLESPATIAL_INC=@ORACLESPATIAL_INC@

# libcurl ... required for WMS/WFS Client Connections
CURL_INC=@CURL_INC@
CURL_LIB=@CURL_LIB@

# libfribibi ... 
FRIBIDI=@FRIBIDI_ENABLED@
FRIBIDI_INC=@FRIBIDI_INC@
FRIBIDI_LIB=@FRIBIDI_LIB@


# libxml2 ... required for OGC SOS Server
XML2_INC=@XML2_INC@
XML2_LIB=@XML2_LIB@

# libxslt ... required for xml mapfile
XSLT_INC=@XSLT_INC@
XSLT_LIB=@XSLT_LIB@

# libexslt ... required for xml mapfile
EXSLT_INC=@EXSLT_INC@
EXSLT_LIB=@EXSLT_LIB@

# Optional Exempi
EXEMPI=@EXEMPI_ENABLED@
EXEMPI_INC=@EXEMPI_INC@
EXEMPI_LIB=@EXEMPI_LIB@

# Optional FastCGI
FASTCGI=@FASTCGI_ENABLED@
FASTCGI_INC=@FASTCGI_INC@
FASTCGI_LIB=@FASTCGI_LIB@

APXS=@APXS@
APACHE_INC=@APACHE_INC@
APR_INC=@APR_INC@
APR_LIB=@APR_LIBS@

# OWS: OGC Web Services support
# OGC WMS Server:  -DUSE_WMS_SVR (Requires PROJ4 support)
# OGC WMS Client Connections:  -DUSE_WMS_LYR (Requires PROJ4 and libcurl)
# OGC WFS Server: -DUSE_WFS_SVR (Requires OGR, PROJ4 recommended)
# OGC WFS Client: -DUSE_WFS_LYR (Requires OGR, PROJ4 and libcurl)
# OGC WCS Server: -DUSE_WCS_SVR (Requires GDAL and PROJ4)
# OGC SOS Server: -DUSE_SOS_SVR (Requires PROJ4 and libxml2)
OWS=@WMS_SVR_ENABLED@ @WMS_LYR_ENABLED@ @WFS_SVR_ENABLED@ @WFS_LYR_ENABLED@ @WCS_SVR_ENABLED@ @SOS_SVR_ENABLED@

#
# IMPORTANT NOTE ABOUT REGEX FOR PHP_MAPSCRIPT USERS:
#
# In order to compile the PHP_MAPSCRIPT module, we have to make MapServer
# use the same version of the REGEX library that PHP was compiled with:
#
PHP_REGEX_OBJ=@PHP_REGEX_OBJ@
PHP_REGEX_INC=@PHP_REGEX_INC@

#
# Multithreading support.
#
THREAD=@THREAD_FLAG@
THREAD_LIB=@THREAD_LIB@

#
# libiconv - Enables Internationalization
#
ICONV=@ICONV_ENABLED@
ICONV_LIB=@ICONV_LIB@
ICONV_INC=@ICONV_INC@

CAIRO=@CAIRO_ENABLED@
CAIRO_LIB=@CAIRO_LIB@
CAIRO_INC=@CAIRO_INC@

LIBSVG_CAIRO=@LIBSVG_CAIRO_ENABLED@
LIBSVG_CAIRO_LIB=@LIBSVG_CAIRO_LIB@
LIBSVG_CAIRO_INC=@LIBSVG_CAIRO_INC@

PHP_MAPSCRIPT=@PHP_MAPSCRIPT@
PYTHON_MAPSCRIPT=@PYTHON_MAPSCRIPT@

#
# Pick a compiler, etc. Flex and bison are only required if you need to modify the mapserver lexer (maplexer.l) or expression parser (mapparser.y).
#
CXX=	@CXX@
CC=     @CC@
LD=     @CXX@
AR= ar rc
RANLIB= @RANLIB@
LEX=    @LEX@
YACC=   @YACC@
LIBTOOL=@LIBTOOL@
INSTALL=@INSTALL@
SED=@SED@

LTCC=$(LIBTOOL) --mode=compile --tag=CC
LTCXX=$(LIBTOOL) --mode=compile --tag=CXX
LTLD=$(LIBTOOL) --mode=link --tag=CXX
LTINSTALL=$(LIBTOOL) --mode=install
OBJ_SUFFIX=lo

XTRALIBS= @XTRALIBS@
RUNPATHS= -rpath $(libdir)

LT_LDFLAGS= $(RUNPATHS)
LINK=$(LTLD) $(LD) $(LT_LDFLAGS)

DEFINES = @ALL_ENABLED@ 

INCLUDES = $(FT_INC) $(REGEX_INC) $(PNG_INC) $(GIF_INC) $(JPEG_INC) $(GD_INC) \
        $(AGG_INC) $(OGL_INC) $(FTGL_INC) $(PROJ_INC) $(EGIS_INC) \
        $(SDE_INC) $(GDAL_INC) $(POSTGIS_INC) $(MYSQL_INC) \
        $(CURL_INC) $(ORACLESPATIAL_INC) $(GEOS_INC) $(ICONV_INC) \
        $(EXEMPI_INC) $(XML2_INC) $(FRIBIDI_INC) $(CAIRO_INC) $(LIBSVG_CAIRO_INC) \
		  $(APR_INC) $(APACHE_INC)

FLAGS = @DEBUG_FLAGS@ $(DEFINES) $(INCLUDES)

CFLAGS   = @CFLAGS@ $(FLAGS)
CXXFLAGS = @CXXFLAGS@ $(FLAGS)

# Link flags and shared libs only
SUP_LIBS =  $(FT_LIB) $(GD_LIB) $(OGL_LIB) $(FTGL_LIB) $(PROJ_LIBS) \
          $(JPEG_LIB) $(PNG_LIB) $(GIF_LIB) $(SDE_LIB) $(GDAL_LIB) $(POSTGIS_LIB) \
	  $(MYSQL_LIB) $(CURL_LIB) $(ORACLESPATIAL_LIB) $(GEOS_LIB) \
	  $(THREAD_LIB) $(ICONV_LIB) $(EXEMPI_LIB) $(XSLT_LIB) $(EXSLT_LIB) \
	  $(XML2_LIB) $(FRIBIDI_LIB) $(XTRALIBS)  $(CAIRO_LIB) $(LIBSVG_CAIRO_LIB) \
	  $(APR_LIB)


EXE_LDFLAGS =	$(RUNPATHS) -lmapserver $(SUP_LIBS)

RM= /bin/rm -f

AGG_OBJ=renderers/agg/src/clipper.$(OBJ_SUFFIX) renderers/agg/src/agg_arc.$(OBJ_SUFFIX) renderers/agg/src/agg_curves.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_vcgen_contour.$(OBJ_SUFFIX) renderers/agg/src/agg_vcgen_dash.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_vcgen_stroke.$(OBJ_SUFFIX) renderers/agg/src/agg_image_filters.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_line_aa_basics.$(OBJ_SUFFIX) renderers/agg/src/agg_line_profile_aa.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_sqrt_tables.$(OBJ_SUFFIX) renderers/agg/src/agg_embedded_raster_fonts.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_trans_affine.$(OBJ_SUFFIX) renderers/agg/src/agg_vpgen_clip_polygon.$(OBJ_SUFFIX)\
		  renderers/agg/src/agg_vpgen_clip_polyline.$(OBJ_SUFFIX) renderers/agg/src/agg_font_freetype.$(OBJ_SUFFIX)

OBJS= $(AGG_OBJ) mapgeomutil.$(OBJ_SUFFIX) mapdummyrenderer.$(OBJ_SUFFIX) mapogl.$(OBJ_SUFFIX) mapoglrenderer.$(OBJ_SUFFIX) mapoglcontext.$(OBJ_SUFFIX) \
				mapimageio.$(OBJ_SUFFIX) mapcairo.$(OBJ_SUFFIX) maprendering.$(OBJ_SUFFIX) mapgeomtransform.$(OBJ_SUFFIX) mapquantization.$(OBJ_SUFFIX) \
				maptemplate.$(OBJ_SUFFIX) mapbits.$(OBJ_SUFFIX) maphash.$(OBJ_SUFFIX) mapshape.$(OBJ_SUFFIX) mapxbase.$(OBJ_SUFFIX) mapparser.$(OBJ_SUFFIX) maplexer.$(OBJ_SUFFIX) \
				maptree.$(OBJ_SUFFIX) mapsearch.$(OBJ_SUFFIX) mapstring.$(OBJ_SUFFIX) mapsymbol.$(OBJ_SUFFIX) mapfile.$(OBJ_SUFFIX) maplegend.$(OBJ_SUFFIX) maputil.$(OBJ_SUFFIX) \
				mapscale.$(OBJ_SUFFIX) mapquery.$(OBJ_SUFFIX) maplabel.$(OBJ_SUFFIX) maperror.$(OBJ_SUFFIX) mapprimitive.$(OBJ_SUFFIX) mapproject.$(OBJ_SUFFIX) mapraster.$(OBJ_SUFFIX) \
				mapsde.$(OBJ_SUFFIX) mapogr.$(OBJ_SUFFIX) mappostgis.$(OBJ_SUFFIX) maplayer.$(OBJ_SUFFIX) mapresample.$(OBJ_SUFFIX) mapwms.$(OBJ_SUFFIX) \
				mapwmslayer.$(OBJ_SUFFIX) maporaclespatial.$(OBJ_SUFFIX) mapgml.$(OBJ_SUFFIX) mapprojhack.$(OBJ_SUFFIX) mapthread.$(OBJ_SUFFIX) mapdraw.$(OBJ_SUFFIX) \
				mapgd.$(OBJ_SUFFIX) mapagg.$(OBJ_SUFFIX) mapoutput.$(OBJ_SUFFIX) mapgdal.$(OBJ_SUFFIX) mapimagemap.$(OBJ_SUFFIX) mapows.$(OBJ_SUFFIX) mapwfs.$(OBJ_SUFFIX) \
				mapwfs11.$(OBJ_SUFFIX) mapwfslayer.$(OBJ_SUFFIX) mapcontext.$(OBJ_SUFFIX) maphttp.$(OBJ_SUFFIX) mapdrawgdal.$(OBJ_SUFFIX) mapjoin.$(OBJ_SUFFIX) mapgraticule.$(OBJ_SUFFIX) \
				mapcopy.$(OBJ_SUFFIX) mapogcfilter.$(OBJ_SUFFIX) mapogcsld.$(OBJ_SUFFIX) maptime.$(OBJ_SUFFIX) mapwcs.$(OBJ_SUFFIX) mapwcs11.$(OBJ_SUFFIX) mapcpl.$(OBJ_SUFFIX) cgiutil.$(OBJ_SUFFIX) \
				maprasterquery.$(OBJ_SUFFIX) mapobject.$(OBJ_SUFFIX) mapgeos.$(OBJ_SUFFIX) classobject.$(OBJ_SUFFIX) layerobject.$(OBJ_SUFFIX) mapio.$(OBJ_SUFFIX) mappool.$(OBJ_SUFFIX) \
				mapregex.$(OBJ_SUFFIX) mappluginlayer.$(OBJ_SUFFIX) mapogcsos.$(OBJ_SUFFIX) mappostgresql.$(OBJ_SUFFIX) mapcrypto.$(OBJ_SUFFIX) mapowscommon.$(OBJ_SUFFIX) \
				maplibxml2.$(OBJ_SUFFIX) mapdebug.$(OBJ_SUFFIX) mapchart.$(OBJ_SUFFIX) maptclutf.$(OBJ_SUFFIX) mapxml.$(OBJ_SUFFIX) mapkml.$(OBJ_SUFFIX) mapkmlrenderer.$(OBJ_SUFFIX) \
				mapogroutput.$(OBJ_SUFFIX) mapwcs20.$(OBJ_SUFFIX)  mapogcfiltercommon.$(OBJ_SUFFIX) mapunion.$(OBJ_SUFFIX) mapcluster.$(OBJ_SUFFIX) mapxmp.$(OBJ_SUFFIX) \
				mapuvraster.$(OBJ_SUFFIX) mapservutil.$(OBJ_SUFFIX) maptile.$(OBJ_SUFFIX)

HEADERS=	cgiutil.h mapgml.h mapoglcontext.h mapregex.h\
			maptile.h dxfcolor.h maphash.h mapoglrenderer.h mapresample.h\
			maptime.h mapagg.h maphttp.h mapows.h mapserv.h\
			maptree.h mapaxisorder.h mapio.h mapowscommon.h\
			mapwcs.h mapcopy.h mapkmlrenderer.h mapparser.h mapshape.h\
			mapentities.h maplibxml2.h mappostgis.h mapsymbol.h maperror.h\
			mapogcfilter.h mapprimitive.h maptemplate.h mapfile.h mapogcsld.h\
			mapproject.h mapthread.h

EXE_LIST = 	shp2img legend mapserv shptree shptreevis \
		shptreetst scalebar sortshp tile4ms \
		msencrypt mapserver-config

#
# --- You shouldn't have to edit anything else. ---
#
all: $(LIBMAP) $(EXE_LIST) mapscriptvars $(PHP_MAPSCRIPT) $(PYTHON_MAPSCRIPT)

# Explicitly invoke this rule when maplexer.l is altered.  We don't do
# it automatically for the reasons listed in #2310

lexer:
	$(LEX) --nounistd -Pmsyy -i -omaplexer.c maplexer.l

maplexer.c:	maplexer.l
	@echo '----------------------------------------------------------------'
	@echo '--  Please run "make lexer" if you have altered maplexer.l     -'
	@echo '----------------------------------------------------------------'

Makefile: Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck
#
# Non-gnumake's don't seem to use this pattern rule, 
# but have a similar built-in rule for C code.  So try not
# to change these, since the change is unlikely to stick.
# 
.SUFFIXES:
.SUFFIXES: .cpp .c .$(OBJ_SUFFIX)

mapserver.h: $(HEADERS)
	touch mapserver.h

.c.$(OBJ_SUFFIX): $(HEADERS)
	$(LTCC) $(CC) -c $(CFLAGS) $< -o $@

mapserv.$(OBJ_SUFFIX): mapserv.c $(HEADERS)
	$(LTCC) $(CC) -c $(CFLAGS) $(FASTCGI_INC) mapserv.c -o $@

.cpp.$(OBJ_SUFFIX): mapserver.h
	$(LTCXX) $(CXX) -c $(CXXFLAGS) $< -o $@
   
maplexer.o: maplexer.c mapserver.h mapfile.h

mapparser.o: mapparser.c mapserver.h

mapparser.c: mapparser.y
	$(YACC) -d -omapparser.c mapparser.y

mod_mapserver.la: $(LIBMAP) mod_mapserver.c
	$(APXS) -c -Wc,"$(CFLAGS)" $(LIBMAP) mod_mapserver.c

mapscript: mapscriptvars mapserver-config

$(LIBMAP): $(OBJS)
	$(LINK) -release $(MS_VERSION)  $(OBJS) $(SUP_LIBS) -o $(LIBMAP)

shp2pdf: $(LIBMAP) shp2pdf.$(OBJ_SUFFIX)
	$(LINK) shp2pdf.$(OBJ_SUFFIX) $(LIBMAP) -o shp2pdf

shp2img: $(LIBMAP) shp2img.$(OBJ_SUFFIX)
	$(LINK) shp2img.$(OBJ_SUFFIX) $(LIBMAP) -o shp2img

sym2img:  sym2img.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) sym2img.$(OBJ_SUFFIX) $(LIBMAP) -o sym2img

legend: legend.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) legend.$(OBJ_SUFFIX) $(LIBMAP) -o legend

scalebar: scalebar.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) scalebar.$(OBJ_SUFFIX) $(LIBMAP) -o scalebar

mapserv: mapserv.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) mapserv.$(OBJ_SUFFIX) $(LIBMAP) $(FASTCGI_LIB) -o mapserv

shpindex: shpindex.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) shpindex.$(OBJ_SUFFIX) $(LIBMAP) -o shpindex

shptree: shptree.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) shptree.$(OBJ_SUFFIX) $(LIBMAP) -o shptree

shptreevis: shptreevis.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) shptreevis.$(OBJ_SUFFIX) $(LIBMAP) -o shptreevis

shptreetst: shptreetst.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) shptreetst.$(OBJ_SUFFIX) $(LIBMAP) -o shptreetst

sortshp: sortshp.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) sortshp.$(OBJ_SUFFIX) $(LIBMAP) -o sortshp

tile4ms: tile4ms.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) tile4ms.$(OBJ_SUFFIX) $(LIBMAP) -o tile4ms

msencrypt: msencrypt.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) msencrypt.$(OBJ_SUFFIX) $(LIBMAP) -o msencrypt

testexpr: testexpr.$(OBJ_SUFFIX) mapparser.$(OBJ_SUFFIX) maplexer.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) testexpr.$(OBJ_SUFFIX) $(LIBMAP) -o testexpr

testcopy: testcopy.$(OBJ_SUFFIX) $(LIBMAP)
	$(LINK) testcopy.$(OBJ_SUFFIX) $(LIBMAP) -o testcopy

test_mapcrypto: mapcrypto.c mapserver.h $(LIBMAP)
	$(LINK) mapcrypto.c -DTEST_MAPCRYPTO $(LIBMAP) -o test_mapcrypto

mapscriptvars:	Makefile
	touch mapscriptvars
	pwd > mapscriptvars
	echo $(IGNORE_MISSING_DATA) $(USE_POINT_Z_M) $(STRINGS) @ALL_ENABLED@ >> mapscriptvars
	echo -I. $(PROJ_INC) $(GD_INC) $(TTF_INC) $(JPEG_INC) $(SDE_INC) $(OGR_INC) $(GDAL_INC) $(GEOS_INC) >> mapscriptvars
	echo $(LIBMAP) >> mapscriptvars
	echo $(EXE_LDFLAGS) >> mapscriptvars
	grep '#define MS_VERSION ' mapserver.h >> mapscriptvars

mapserver-config: Makefile
	rm -f mapserver-config
	echo '#!/bin/sh' > mapserver-config
	echo 'CONFIG_LIBS="$(SUP_LIBS)"' >> mapserver-config
	echo 'CONFIG_DEP_LIBS="$(LIBS)"' >> mapserver-config
	echo 'CONFIG_CFLAGS="$(CFLAGS)"' >> mapserver-config
	echo 'CONFIG_DEFINES="$(DEFINES)"' >> mapserver-config
	echo 'CONFIG_INCLUDES="$(INCLUDES)"' >> mapserver-config
	echo 'CONFIG_VERSION="'`grep '#define MS_VERSION ' mapserver.h | $(SED) 's/\"//g' | $(SED) 's/#define MS_VERSION //'`'"' >> mapserver-config
	cat mapserver-config.in >> mapserver-config
	chmod a+x mapserver-config

php_mapscript: $(LIBMAP)
	cd mapscript/php; $(MAKE) $(MFLAGS);

php_mapscript_clean:
	test -z "$(PHP_MAPSCRIPT)" || (cd mapscript/php; $(MAKE) clean;)

php_mapscript_install:
	test -z "$(PHP_MAPSCRIPT)" || (cd mapscript/php; $(MAKE) install DESTDIR=$(DESTDIR);)

python_mapscript: $(LIBMAP)
	cd mapscript/python; $(MAKE) $(MFLAGS);

python_mapscript_clean:
	test -z "$(PYTHON_MAPSCRIPT)" || (cd mapscript/python; $(MAKE) clean;)

python_mapscript_install:
	test -z "$(PYTHON_MAPSCRIPT)" || (cd mapscript/python; $(MAKE) install DESTDIR=$(DESTDIR);)

install: install-lib install-bin install-cgibin php_mapscript_install python_mapscript_install

install-cgibin: install-lib mapserv
	$(LTINSTALL) $(INSTALL) mapserv $(DESTDIR)$(bindir)/mapserv
	@echo ""
	@echo "***** MapServer CGI / FastCGI Installation *****"
	@echo "To install MapServer, copy or symlink the \"$(bindir)/mapserv\" file"
	@echo "to your web server's cgi-bin directory."
	@echo "If you use MapScript then see the documentation for your specific MapScript"
	@echo "version for installation instructions."
	@echo ""

install-dirs:
	$(INSTALL) -d $(DESTDIR)$(bindir) $(DESTDIR)$(libdir)

install-bin: install-dirs install-lib $(EXE_LIST)
	@list='$(EXE_LIST)'; for p in $$list; do \
	  if test -f $$p; then \
	    $(LTINSTALL) $(INSTALL) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

install-lib: install-dirs $(LIBMAP)
	$(LTINSTALL) $(INSTALL) $(LIBMAP) $(DESTDIR)$(libdir)/$(LIBMAP); \

uninstall:
	@list='$(EXE_LIST)'; for p in $$list; do \
	  if test -f $(DESTDIR)$(bindir)/$$p; then \
	    $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done
	$(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$(LIBMAP)

install-module: mod_mapserver.la install-lib
	$(APXS) -i -a -n "mapserver" mod_mapserver.la

clean: php_mapscript_clean python_mapscript_clean
	rm -rf $(LIBMAP) mapscriptvars *.o *.lo *.la .libs $(EXE_LIST) renderers/agg/src/*.o renderers/agg/src/*.lo renderers/agg/src/.libs

exe-clean:
	rm -f $(EXE_LIST)

distclean:
	$(MAKE) clean
	rm config.log
	if test -d autom4te.cache ; then \
	  rm -f -r autom4te.cache ; \
	fi

sorta-clean:
	rm -f *.o *.lo


wxs-testcase:
	cd msautotest/wxs && export PATH=../..:$(PATH) && ./run_test.py

renderers-testcase:
	cd msautotest/renderers && export PATH=../..:$(PATH) && ./run_test.py

misc-testcase:
	cd msautotest/misc && export PATH=../..:$(PATH) && ./run_test.py

gdal-testcase:
	cd msautotest/gdal && export PATH=../..:$(PATH) && ./run_test.py

query-testcase:
	cd msautotest/query && export PATH=../..:$(PATH) && ./run_test.py

autotest-install:
	test -d "msautotest/wxs" ||  ( git submodule init && git submodule update )

php-testcase:
	test -z "$(PHP_MAPSCRIPT)" || (export PHP_MAPSCRIPT_SO="../../mapscript/php/.libs/php_mapscript.so" && cd msautotest/php && ./run_test.sh)

test: shp2img mapserv autotest-install $(PHP_MAPSCRIPT) $(PYTHON_MAPSCRIPT)
	@$(MAKE) $(MFLAGS)	wxs-testcase renderers-testcase misc-testcase gdal-testcase query-testcase
	@./print-test-results.sh
	@$(MAKE) php-testcase
